<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize resolution stack
global.resolve = ds_queue_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
next = ds_queue_dequeue(global.resolve);

if next == spr_card_red {
    with (instance_nearest(Player.x, Player.y, Enemy)) {
        instance_destroy();
    }
} else if next == spr_card_blue {
    var i;
    for (i = 0; i &lt; 5; i++) {
        target = instance_nearest(Player.x, Player.y, Enemy);
        ok_to_land = false;
            
        while ok_to_land = false {
            check_x = irandom(Level.width);
            check_y = irandom(Level.height);
                    
            if (Level.grid[# check_x, check_y] == FLOOR){
                ok_to_land = true;
            }
        }
            
        target.x = check_x * CELL_WIDTH+CELL_WIDTH/2;
        target.y = check_y * CELL_HEIGHT+CELL_HEIGHT/2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next = ds_queue_dequeue(global.resolve);

if next == spr_card_red {
    with (instance_nearest(obj_player.x, obj_player.y, Enemy)) {
        instance_destroy();
    }
} else if next == spr_card_blue {
    var i;
    for (i = 0; i &lt; 5; i++) {
        target = instance_nearest(obj_player.x, obj_player.y, Enemy);
        ok_to_land = false;
            
        while ok_to_land = false {
            check_x = irandom(Level.width);
            check_y = irandom(Level.height);
                    
            if (Level.grid[# check_x, check_y] == FLOOR){
                ok_to_land = true;
            }
        }
            
        target.x = check_x * CELL_WIDTH+CELL_WIDTH/2;
        target.y = check_y * CELL_HEIGHT+CELL_HEIGHT/2;
    }
} else if next == spr_card_green {
    instance_create(obj_player.x, obj_player.y, obj_poison_cloud);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
